<?php
// $Id: sina_login.info,v 0.1 20110523 Felix $

/**
 * @file
 * Sina weibo users shared login.
 */
/**
 * Implementation of hook_menu.
 */
function open_weibo_menu() {  
  $items['open_users/weibo'] = array(
    'description' => '新浪微博用户登录或者绑定',
    'page callback' => 'weibo_login',
    //'access callback' => 'user_is_anonymous',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'open_weibo.pages.inc',
  );
  $items['user/%user/open_users/weibo'] = array(
    'title' => t('Weibo Settings'),
    'page callback' => 'open_weibo_user_config',
    'page arguments' => array(1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'open_weibo.pages.inc',
  );
  $items['user/%user/open_users/weibo/remove'] = array(
    'title' => '解除绑定weibo',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('open_weibo_remove_confirm'),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'open_weibo.pages.inc',
  );
  $items['admin/config/system/open_users/weibo'] = array(
    'title' => t('open users setting for weibo'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('open_weibo_admin_config'),
    'access arguments' => array('administer site configuration'),
    'file' => 'open_weibo.pages.inc',
  );
  
  return $items;
}

function open_weibo_get_config(){
	
	$weibo_config['open_weibo_app_key'] = variable_get('open_weibo_app_key', NULL);
	$weibo_config['open_weibo_app_secret'] = variable_get('open_weibo_app_secret', NULL);
	$weibo_config['open_weibo_redirect_uri'] = variable_get('open_weibo_redirect_uri', NULL);

	return $weibo_config;
}
/**
 * 使用新浪微博帐号登录或绑定帐号的权限
 */
function open_weibo_is_access() {
  global $user;
  return $user->uid > 0 || variable_get('sina_login_is_login', 1);
}

/**
 * Implementation of hook_form_alter
 * add weibo login links to login block or login form.
 */
function open_weibo_form_alter(&$form, $form_state, $form_id) {
	$weibo_config = open_weibo_get_config();
	if($form_id!='user_login_block'){		
		//dpm($form,$form_id);
	}//if($_SESSION)dpm($_SESSION);
	if($weibo_config['open_weibo_app_key']&&$weibo_config['open_weibo_app_secret']){
		if($form_id == 'user_login_block' || $form_id == 'user_login'){
			if (variable_get('open_weibo_enabled', 1)) {//TODO: open_users define your own url?
				$items[] = l(t('login with weibo'), 'open_users/weibo', array('attributes' => array('title' => t('使用新浪微博登陆本站.'))));
		 }
		 $form['open_weibo_login'] = array('#markup' => theme('item_list', array('items' => $items)));
		}
	}

/**
 * Implementation of hook_form_alter
 * //TODO 判断存在的第三方模块，设置是否同步
 */
	//isset($form['#node']->nid) 
	//not the edit node form.
	$synch_types = variable_get('synch_types', NULL);
  if(!$synch_types){
    $synch_types = array();
  }else{
    $synch_types = array_filter(unserialize($synch_types));
  }

	if(isset($form['#node']) && !isset($form['#node']->nid) 
		&& $form['#node']->type .'_node_form' == $form_id) {
		if(in_array($form['#node']->type, array_keys($synch_types)) && $synch_types[$form['#node']->type]) {
		//$synch_types[$form['#node']->type] == 1
 		//启用模块，并设置同步
			$module ='open_weibo';
			if(module_exists($module)&&variable_get($module.'_enabled')){
				// $form[$module] = array(
		  //     '#type' => 'fieldset',
		  //     '#title' => '同步',
		  //     '#collapsible' => true,
		  //     '#collapsed' => FALSE,
		  //     '#tree' => true
		  //   );
		    $form[$module]['synch'] = array(
		      '#type' => 'radios',
		      '#title' => '微博同步',
		      '#required' => true,
		      '#default_value' => 0,
		      '#options' => array('否', '是'),
		    );
			}
		}
	};
	
	//comment #id
	//comment_node_article_form
	
	//XXX:not the edit node form.
	//comment_node_article_form
	if($form['#id']=='comment-form' 
	&& 'comment_node_'.$form['#node']->type .'_form' == $form_id){
		//启用模块，并设置同步
		$module ='open_weibo';
		if(module_exists($module)&&variable_get($module.'_enabled')){
			$form[$module] = array(
	      '#type' => 'fieldset',
	      '#title' => '同步到新浪微博',
	      '#collapsible' => true,
	      '#collapsed' => true,
	      '#tree' => true
	    );
	    $form[$module]['synch'] = array(
	      '#type' => 'radios',
	      '#title' => '发送',
	      '#required' => true,
	      '#default_value' => 0,
	      '#options' => array('否', '是'),
	    );
		}
	}
	
}


/**
 * @Implement of hook_user()
 */
function open_weibo_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'delete':
      db_query("DELETE FROM {users_open} WHERE uid = %d AND open_type = 'weibo'", $account->uid);
    break;   
  }
}


/**
 * Respond to creation of a new node synch.
 *
 * This hook is invoked from node_save() after the node is inserted into the
 * node table in the database, after the type-specific hook_insert() is invoked,
 * and after field_attach_insert() is called.
 *
 * @param $node
 *   The node that is being created.
 *
 * @ingroup node_api_hooks
 */
function open_weibo_node_insert($node) {
	global $user;
	$synch_types = variable_get('synch_types',NULL);
	$synch_types = array_filter(unserialize($synch_types));	
	//TODO
	//1 ,开启同步
	//1.2 同步类型匹配
	//2.节点form设置同步 
	//3.session过期提示
	$synch_types = variable_get('synch_types', NULL);
  if(!$synch_types){
    $synch_types = array();
  }else{
    $synch_types = array_filter(unserialize($synch_types));
  }

	if(in_array($node->type, array_keys($synch_types)) && $synch_types[$node->type] && $node->synch) {
		if(key_exists($node->type, $synch_types)
		&& open_weibo_synch($node->title,node_type_get_name($node),node_uri($node))){
			drupal_set_message('Synch to weibo sucess!','status');
		}else{
			drupal_set_message('Synch to weibo error!','error');
		}
	}
}

/**
 * The comment is being inserted.
 *
 * @param $comment
 *   The comment object.
 */
function open_weibo_comment_insert($comment) {
  global $user;
	$synch_types = variable_get('synch_types',NULL);
	$synch_types = array_filter(unserialize($synch_types));	
	//TODO
	//1 ,开启同步
	//1.2 同步类型匹配
	//2.节点form设置同步 
	//3.session过期提示
	dpm($comment,'$comment');
	if($comment->open_weibo['synch']) {
		if(open_weibo_synch($comment->subject?$comment->subject:$comment->comment_body[LANGUAGE_NONE][0]['value'],t('Comments'),comment_uri($comment))){
			drupal_set_message('Synch to weibo sucess!','status');
		}else{
			drupal_set_message('Synch to weibo error!','error');
		}
	}
}
function open_weibo_synch($title,$type,$uri_array){ //$entity
	if(isset($_SESSION['open_weibo_access_token'])){
		require_once("weibo_sdk/saetv2.ex.class.php");
		$weibo_config = open_weibo_get_config();
		$token = $_SESSION['open_weibo_access_token'];
		$c = new SaeTClientV2( $weibo_config['open_weibo_app_key'], $weibo_config['open_weibo_app_secret'],$token['access_token']);
    $status = '我在【'.variable_get('site_name').'】发布了'.$type.'：'.truncate_utf8($title, $max_length=120, $wordsafe = FALSE, $add_ellipsis = TRUE, $min_wordsafe_length = 1);
    $status .= ' '.url(NULL, array('absolute' => TRUE)) . (variable_get('clean_url', 0) ? '' : '?q=').$uri_array['path'];
    $synch = $c->update( $status, $lat = NULL, $long = NULL, $annotations = NULL );
		return  $synch['mid']?TRUE:FALSE;
	}
}

/**
 * 发布微博表单
 * @param (array) &$form_state
 * @param (int) $uid
 */
function open_weibo_test_form() {
  $form['weibo_update_text'] = array(
    '#type' => 'textarea',
    '#title' => '发布到新浪微博',
    '#description' => '最多140个字符，中英文均算一个字符。还可以输入<strong id="sina_open_tweet_text_count"></strong>个字符。',
    '#required' => 1
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => '确认发布'
  );
  drupal_add_js(drupal_get_path('module', 'sina_open') .'/sina_open.js');
  return $form;
}

function open_weibo_test_form_validate($form, &$form_state) {
  $form_state['values']['weibo_update_text'] = trim($form_state['values']['weibo_update_text']);
  if (drupal_strlen($form_state['values']['text']) > 140) {
    form_set_error('sina_open_tweet_text', '不大于 140 个字符');
  } else if (!$result=weibo_open_update($form_state['values']['weibo_update_text'])) {
    form_set_error('weibo_update_text', '请重试');
  }
  //为啥没有 提示信息呢？？？？？？？git 
   /* dpm($result);  
  if ($result['mid']) {
    drupal_set_message('已成功发送到新浪微博');
  } else {
    drupal_set_message('发送到新浪微博失败', 'error');
    return false;
  }
  */
}

/**
 * Implementation of hook_form_alter
 * //TODO 判断存在的第三方模块，设置是否同步
 */
function open_weibo_form_alter00(&$form, $form_state, $form_id) {
	

  //TODO commets setting
  global $user;
  $sina_open = false;
  
  if ('comment_form' == $form_id) {
    if (variable_get('sina_open_comment', 1)) {
      if ($user->uid > 0) { 
        $sina_open = true;
      } else {
        
        if (variable_get('comment_form_location_'. $node->type, COMMENT_FORM_SEPARATE_PAGE) == COMMENT_FORM_SEPARATE_PAGE) {
          $destination = 'redirect='. rawurlencode('comment/reply/'.$form['nid']['#value']);
        } else {
          $destination = 'redirect='. rawurlencode('node/'.$form['nid']['#value']);
        }
        
        $form['sina_open_links'] = array(
          '#value' => theme('item_list', array(array(
            'data' => l('使用新浪微博登录', 'sina_open/t_login', array('query' => $destination)),
            'class' => 'sina_open_login_links'
          ))),
          '#weight' => -2,
        );
      }
    }
  }else if (isset($form['#node']) && $form['#node']->type .'_node_form' == $form_id
  && variable_get('sina_open_node_'.$form['#node']->type, 1) && !isset($form['#node']->nid)) {
    $sina_open = true;
  }
  
  return $form;
}